type TxReceipt = 
 variant {
   Err: ApiError;
   Ok: nat;
 };
type TokenId__1 = nat64;
type TokenId = nat64;
type Token = record {};
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (Token) ->
                                (StreamingCallbackHttpResponse);
                              token: Token;
                            };};
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: Token;
 };
type Source = 
 record {
   id: text;
   platform: Platform;
   releaseDate: text;
   uri: text;
 };
type Serve = 
 service {
   addFeed: (text, Feed) -> (nat);
   addNftCustodian: (principal) -> (Result__1);
   addRequestedFeedKey: (text) -> (Result_1);
   balanceOfDip721: (principal) -> (nat64) query;
   buyNft: (text, text) -> (BuyNftResult);
   create: (ProfileUpdate__1) -> (Result);
   delete: () -> (Result);
   deleteFeed: (text) -> () oneway;
   getAllFeedKeys: () -> (vec text) query;
   getAllFeedMediaDetails: () -> (vec record {
                                        text;
                                        vec record {
                                              text;
                                              text;
                                            };
                                      });
   getAllFeedSummaries: () -> (vec record {
                                     text;
                                     text;
                                   });
   getAllFeeds: () -> (vec record {
                             text;
                             Feed;
                           }) query;
   getFeed: (text) -> (opt Feed) query;
   getFeedMediaDetails: (text) -> (text, vec record {
                                               text;
                                               text;
                                             });
   getFeedSummary: (text) -> (text, text);
   getMaxLimitDip721: () -> (nat16) query;
   getMetadataDip721: (TokenId) -> (MetadataResult) query;
   getMetadataForUserDip721: (principal) -> (ExtendedMetadataResult);
   getSampleFeed: () -> (Feed) query;
   getTokenIdsForUserDip721: (principal) -> (vec TokenId) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_update: (HttpRequest) -> (HttpResponse);
   logoDip721: () -> (LogoResult) query;
   mintDip721: (principal, MetadataDesc) -> (MintReceipt);
   nameDip721: () -> (text) query;
   ownerOfDip721: (TokenId) -> (OwnerResult) query;
   read: () -> (Result_1);
   safeTransferFromDip721: (principal, principal, TokenId) -> (TxReceipt);
   setNftTokenId: (text, text, opt nat64) -> (MediaSearchResult);
   supportedInterfacesDip721: () -> (vec InterfaceId) query;
   symbolDip721: () -> (text) query;
   totalSupplyDip721: () -> (nat64) query;
   transferFromDip721: (principal, principal, TokenId) -> (TxReceipt);
   update: (ProfileUpdate) -> (Result);
 };
type SearchError = 
 variant {
   FeedNotFound;
   MediaNotFound;
 };
type Result__1 = 
 variant {
   Err: ApiError;
   Ok;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileUpdate__1 = 
 record {
   bio: Bio;
   feedKeys: vec text;
 };
type ProfileUpdate = 
 record {
   bio: Bio;
   feedKeys: vec text;
 };
type Profile = 
 record {
   bio: Bio;
   feedKeys: vec text;
   id: principal;
 };
type Platform = 
 record {
   id: text;
   uri: text;
 };
type OwnerResult = 
 variant {
   Err: ApiError__1;
   Ok: principal;
 };
type MintReceiptPart = 
 record {
   id: nat;
   token_id: TokenId__1;
 };
type MintReceipt = 
 variant {
   Err: ApiError__1;
   Ok: MintReceiptPart;
 };
type MetadataVal = 
 variant {
   BlobContent: blob;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   TextContent: text;
 };
type MetadataResult = 
 variant {
   Err: ApiError__1;
   Ok: MetadataDesc__1;
 };
type MetadataPurpose = 
 variant {
   Preview;
   Rendered;
 };
type MetadataPart = 
 record {
   data: blob;
   key_val_data: vec MetadataKeyVal;
   purpose: MetadataPurpose;
 };
type MetadataKeyVal = 
 record {
   key: text;
   val: MetadataVal;
 };
type MetadataDesc__1 = vec MetadataPart;
type MetadataDesc = vec MetadataPart;
type MediaSearchResult = 
 variant {
   Err: SearchError;
   Ok: Media;
 };
type Media = 
 record {
   description: text;
   durationInMicroseconds: nat;
   etag: text;
   lengthInBytes: nat;
   nftTokenId: opt nat64;
   source: Source;
   title: text;
   uri: text;
 };
type LogoResult = 
 record {
   data: text;
   logo_type: text;
 };
type InterfaceId = 
 variant {
   Approval;
   Burn;
   Mint;
   TransactionHistory;
   TransferNotification;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Feed = 
 record {
   author: text;
   description: text;
   email: text;
   imageUrl: text;
   link: text;
   mediaList: vec Media;
   subtitle: text;
   title: text;
 };
type ExtendedMetadataResult = 
 variant {
   Err: ApiError__1;
   Ok: record {
         metadata_desc: MetadataDesc__1;
         token_id: TokenId__1;
       };
 };
type Error = 
 variant {
   AlreadyExists;
   NotAuthorized;
   NotFound;
 };
type BuyNftResult = 
 variant {
   Err: variant {
          FeedNotFound;
          MediaNotFound;
          NotAuthorized;
          Other;
        };
   Ok: nat64;
 };
type Bio = record {name: opt text;};
type ApiError__1 = 
 variant {
   InvalidTokenId;
   Other;
   Unauthorized;
   ZeroAddress;
 };
type ApiError = 
 variant {
   InvalidTokenId;
   Other;
   Unauthorized;
   ZeroAddress;
 };
service : (principal) -> Serve
